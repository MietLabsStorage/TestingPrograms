// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UnitTesting
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("IntegrationTests")]
    public partial class IntegrationTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "IntegrationTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "IntegrationTests", "\tintegration tests for calculaor", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add two numbers")]
        [NUnit.Framework.CategoryAttribute("integration_test_sum")]
        [NUnit.Framework.TestCaseAttribute("1", "2", "3", null)]
        [NUnit.Framework.TestCaseAttribute("-1", "-2", "-3", null)]
        [NUnit.Framework.TestCaseAttribute("-1", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "-2", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("0.3", "0.3", "0.6", null)]
        [NUnit.Framework.TestCaseAttribute("-1.7E308", "1.7E308", "0", null)]
        [NUnit.Framework.TestCaseAttribute("x", "y", "0", null)]
        [NUnit.Framework.TestCaseAttribute("x", "1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "y", "1", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "Empty parameter", null)]
        [NUnit.Framework.TestCaseAttribute("", "1", "Empty parameter", null)]
        [NUnit.Framework.TestCaseAttribute("1", "", "Empty parameter", null)]
        public virtual void AddTwoNumbers(string a, string b, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "integration_test_sum"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add two numbers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("init calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.Given(string.Format("A is {0}", a), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And(string.Format("B is {0}", b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.When("click to sum", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then(string.Format("result is {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And("close calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Substract two numbers")]
        [NUnit.Framework.CategoryAttribute("integration_test_minus")]
        [NUnit.Framework.TestCaseAttribute("1", "2", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("-1", "-2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("-1", "2", "-3", null)]
        [NUnit.Framework.TestCaseAttribute("1", "-2", "3", null)]
        [NUnit.Framework.TestCaseAttribute("0.3", "0.6", "-0.3", null)]
        [NUnit.Framework.TestCaseAttribute("-1.7E308", "-1.7E308", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1.7E308", "1.7E308", "0", null)]
        [NUnit.Framework.TestCaseAttribute("x", "y", "0", null)]
        [NUnit.Framework.TestCaseAttribute("x", "1", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "y", "1", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "Empty parameter", null)]
        [NUnit.Framework.TestCaseAttribute("", "1", "Empty parameter", null)]
        [NUnit.Framework.TestCaseAttribute("1", "", "Empty parameter", null)]
        public virtual void SubstractTwoNumbers(string a, string b, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "integration_test_minus"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Substract two numbers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
 testRunner.Given("init calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.Given(string.Format("A is {0}", a), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
 testRunner.And(string.Format("B is {0}", b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.When("click to minus", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.Then(string.Format("result is {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.And("close calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiply two numbers")]
        [NUnit.Framework.CategoryAttribute("integration_test_multiply")]
        [NUnit.Framework.TestCaseAttribute("1", "2", "2", null)]
        [NUnit.Framework.TestCaseAttribute("-1", "-2", "2", null)]
        [NUnit.Framework.TestCaseAttribute("-1", "2", "-2", null)]
        [NUnit.Framework.TestCaseAttribute("1", "-2", "-2", null)]
        [NUnit.Framework.TestCaseAttribute("0.3", "0.3", "0.09", null)]
        [NUnit.Framework.TestCaseAttribute("-1.7E307", "10", "-1.7E+308", null)]
        [NUnit.Framework.TestCaseAttribute("1.7E307", "10", "1.7E+308", null)]
        [NUnit.Framework.TestCaseAttribute("x", "y", "0", null)]
        [NUnit.Framework.TestCaseAttribute("x", "1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1", "y", "0", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "Empty parameter", null)]
        [NUnit.Framework.TestCaseAttribute("", "1", "Empty parameter", null)]
        [NUnit.Framework.TestCaseAttribute("1", "", "Empty parameter", null)]
        public virtual void MultiplyTwoNumbers(string a, string b, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "integration_test_multiply"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiply two numbers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
 testRunner.Given("init calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
 testRunner.Given(string.Format("A is {0}", a), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
 testRunner.And(string.Format("B is {0}", b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.When("click to multiply", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
 testRunner.Then(string.Format("result is {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
 testRunner.And("close calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Divide two numbers")]
        [NUnit.Framework.CategoryAttribute("integration_test_division")]
        [NUnit.Framework.TestCaseAttribute("1", "2", "0.5", null)]
        [NUnit.Framework.TestCaseAttribute("-1", "-2", "0.5", null)]
        [NUnit.Framework.TestCaseAttribute("-1", "2", "-0.5", null)]
        [NUnit.Framework.TestCaseAttribute("1", "-2", "-0.5", null)]
        [NUnit.Framework.TestCaseAttribute("0.3", "0.3", "1", null)]
        [NUnit.Framework.TestCaseAttribute("-1.7E308", "10", "-1.7E+307", null)]
        [NUnit.Framework.TestCaseAttribute("1.7E308", "10", "1.7E+307", null)]
        [NUnit.Framework.TestCaseAttribute("x", "y", "Division by zero", null)]
        [NUnit.Framework.TestCaseAttribute("x", "1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1", "y", "Division by zero", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "Empty parameter", null)]
        [NUnit.Framework.TestCaseAttribute("", "1", "Empty parameter", null)]
        [NUnit.Framework.TestCaseAttribute("1", "", "Empty parameter", null)]
        [NUnit.Framework.TestCaseAttribute("12", "0", "Division by zero", null)]
        [NUnit.Framework.TestCaseAttribute("12", "0.00000001", "Division by zero", null)]
        [NUnit.Framework.TestCaseAttribute("12", "0.000000009", "Division by zero", null)]
        [NUnit.Framework.TestCaseAttribute("12", "-0.00000001", "Division by zero", null)]
        [NUnit.Framework.TestCaseAttribute("12", "-0.000000009", "Division by zero", null)]
        public virtual void DivideTwoNumbers(string a, string b, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "integration_test_division"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Divide two numbers", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 81
 testRunner.Given("init calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 82
 testRunner.Given(string.Format("A is {0}", a), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
 testRunner.And(string.Format("B is {0}", b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.When("click to division", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
 testRunner.Then(string.Format("result is {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
 testRunner.And("close calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
